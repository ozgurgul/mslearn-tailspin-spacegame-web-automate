trigger:
  - '*'
  
variables:
  buildConfiguration: 'Release'

stages:

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - job: Provision
    displayName: 'Provision Azure App Service'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Release
    steps:
    - script: |
        # Exit when any command returns a failure status.
        set -e

        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
        echo 'container_name = "tfstate"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars

        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"
        
        # Apply the Terraform destroy.
        # terraform destroy -input=false -auto-approve

        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

        # Get the App Service name for the dev environment.
        WebAppNameDev=$(terraform output appservice_name_dev) 

        # Write the WebAppNameDev variable to the pipeline.
        echo "##vso[task.setvariable variable=WebAppNameDev;isOutput=true]$WebAppNameDev"
      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  - deployment: deploy
    dependsOn: Provision
    variables:
      # map the output variable from A into this job
      WebAppNameDev: $[ dependencies.Provision.outputs['RunTerraform.WebAppNameDev'] ]
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo $(WebAppNameDev) # this step uses the mapped-in variable
            name: echovar
          - script: |
              echo "##vso[task.setvariable variable=WebAppName;]$(WebAppNameDev)"
            displayName: 'Run a one-line script'
          - script: |
              echo $(WebAppName) 
            displayName: '=== DEBUG LINE ==='   
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              ##[error]Error: Resource '"tailspin-space-game-web-dev-2444"' doesn't exist. Resource should exist before deployment.
              appName: $(WebAppName)
              # as a workaround I had to hardcode App Name
              #appName: 'tailspin-space-game-web-dev-2444'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
