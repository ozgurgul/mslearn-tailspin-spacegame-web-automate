# Performance Benchmarking Script on Centos
# Author: Ozgur Gul (HPE)
# Date: 2021/04/29
# Version: 0.1 (Alpha)

trigger:
- 'perf-bench-pipeline'

pr: none

variables:
  buildConfiguration: 'EnvSource'
  TestRunId: ${{ 0 }}

stages:
  - stage: 'Dev'
    displayName: 'Deploy to the dev environment'
    jobs:
    - job: Provision
      displayName: 'Provision Azure App Service'
      pool:
        vmImage: 'ubuntu-18.04'
      
      variables:
      - group: EnvSource

      steps:
        # Downloads a secure certificate file and installs to ./.ssh folder
      - task: DownloadSecureFile@1
        name: sshPrivFile
        displayName: 'Download SSH Private Key File '
        inputs:
          secureFile: 'terraform_rsa.pem'
 
      # Soft linking 
      - task: Bash@3
        displayName: 'Soft linking the priv key file'
        inputs:
          targetType: 'inline'
          script: |
              ## DEBUG ##
              echo "This is me: $(id)" 
              ## END ##
              # Move the pem file
              echo "Copying $(sshPrivFile.secureFilePath) to the Temp directory..."
              sudo cp $(sshPrivFile.secureFilePath) $(Agent.TempDirectory)
              sudo chmod 600 $(Agent.TempDirectory)/terraform_rsa.pem
     
      # Prepare the directory structure on VM-02    
      - task: SSH@0
        displayName: 'Prepare the directory structure on VM-02'
        inputs:
          sshEndpoint: 'vm02SrvConn'
          runOptions: 'inline'
          inline: |
            sudo mkdir -p /data/benchmark
            sudo chown -R $(remoteUser):$(remoteUser) /data/benchmark
            sudo chmod 2700 /data/benchmark
          readyTimeout: '40000'

      # Prepare the directory structure on VM-01    
      - task: Bash@3
        displayName: 'Prepare the directory structure on VM-01'
        inputs:
          targetType: 'inline'
          script: |
            # Make Directory Structure on VM-01 Preparation
            TARGET_SERVER=$(tgtServer01)
            REMOTE_USER=$(remoteUser)
            SSH_KEY_FILE=$(Agent.TempDirectory)/terraform_rsa.pem

            ssh -q -i $SSH_KEY_FILE -o StrictHostKeyChecking=no -T $REMOTE_USER@$TARGET_SERVER <<'EOSSH'
            
            ## DEBUG ##
            echo "Remote User: $(remoteUser)"
            ## END ## 

            # Prepare landing directory 
            sudo mkdir -p /data/benchmark
            sudo chown -R $(remoteUser):$(remoteUser) /data/benchmark
            sudo chmod 2700 /data/benchmark
            
            ## DEBUG ##
            # List the content 
            VAR1=`ls -al /data/benchmark`
            echo "$VAR1"
            ## END ##
            
            EOSSH
        env:
          SSH_KEY_FILE: "./.ssh/terraform_rsa.pem"

     
              
      # CopyFilesOverSSH on vm-01
      - task: Bash@3
        displayName: 'CopyFilesOverSSH on vm-01'
        inputs:
          targetType: 'inline'
          script: |
            # Write for VM-01 Preparation
            TARGET_SERVER=$(tgtServer01)
            REMOTE_USER=$(remoteUser)
            SSH_KEY_FILE=$(Agent.TempDirectory)/terraform_rsa.pem

            echo "FIO_SIZE=$(fioSize)"                          | tee ./benchmark/.env 
            echo "FIO_OFFSET_INCREMENT=$(fioOffsetIncrement)"   | tee -a ./benchmark/.env 
            echo "FIO_DIRECT=$(fioDirect)"                      | tee -a ./benchmark/.env
            echo "FIO_BENCH_QUICK=$(fioBenchQuick)"             | tee -a ./benchmark/.env
            echo "RUN_IPERF=$(runIperf)"                        | tee -a ./benchmark/.env
            echo "IPERF_REMOTE_SERVER=$(iperfRemoteServer02)"   | tee -a ./benchmark/.env
            echo "IPERF_PORT=$(iperfPort)"                      | tee -a ./benchmark/.env
            
            # Avoid Pem file is too open
            chmod 0600 $SSH_KEY_FILE
            
            ## DEBUG ##
            ls -al ./benchmark/ 
            ## END ##
          
            ssh -q -i $SSH_KEY_FILE -o StrictHostKeyChecking=no $REMOTE_USER@$TARGET_SERVER "date"
            
            # copy using ssh keys from agent to target machine
            # to see the transfer progress
            # ... -e "ssh -q -i $SSH_KEY_FILE" --progress ./benchmark/ ...
            rsync -q -av -e "ssh -q -i $SSH_KEY_FILE" --progress ./benchmark/  $REMOTE_USER@$TARGET_SERVER:/data/benchmark/

            ssh -q -i $SSH_KEY_FILE -o StrictHostKeyChecking=no -T $REMOTE_USER@$TARGET_SERVER <<'EOSSH'
            
            # Change Permissions
            sudo chown -R root:root /data/benchmark/*
            sudo chmod -R 2700 /data/benchmark/*
            sudo chmod -R 700 /data/benchmark/*
            
            ## DEBUG ##
            # List the content 
            VAR1=`ls -al /data/benchmark`
            echo "$VAR1"
            ## END ##

            EOSSH
        env:
          SSH_KEY_FILE: "./.ssh/terraform_rsa.pem"

      # CopyFilesOverSSH on vm-02
      - task: Bash@3
        displayName: 'CopyFilesOverSSH on vm-02'
        inputs:
          targetType: 'inline'
          script: |
            # Write for VM-02 Preparation
            TARGET_SERVER=$(tgtServer02)
            REMOTE_USER=$(remoteUser)
            SSH_KEY_FILE=$(Agent.TempDirectory)/terraform_rsa.pem
            
            echo "FIO_SIZE=$(fioSize)"                          | tee ./benchmark/.env 
            echo "FIO_OFFSET_INCREMENT=$(fioOffsetIncrement)"   | tee -a ./benchmark/.env 
            echo "FIO_DIRECT=$(fioDirect)"                      | tee -a ./benchmark/.env
            echo "FIO_BENCH_QUICK=$(fioBenchQuick)"             | tee -a ./benchmark/.env
            echo "RUN_IPERF=$(runIperf)"                        | tee -a ./benchmark/.env
            echo "IPERF_REMOTE_SERVER=$(iperfRemoteServer01)"   | tee -a ./benchmark/.env
            echo "IPERF_PORT=$(iperfPort)"                      | tee -a ./benchmark/.env
            
            # Pem file is too open
            chmod 0600 $SSH_KEY_FILE
            
            ## REMOVE when ready
            ls -al ./benchmark/ 
          
            ssh -q -i $SSH_KEY_FILE -o StrictHostKeyChecking=no $REMOTE_USER@$TARGET_SERVER "date"
            
            # copy using ssh keys from agent to target machine
            # to see the transfer progress
            # ... -e "ssh -q -i $SSH_KEY_FILE" --progress ./benchmark/ ...
            rsync -q -av -e "ssh -q -i $SSH_KEY_FILE" --progress ./benchmark/  $REMOTE_USER@$TARGET_SERVER:/data/benchmark/

            ssh -q -i $SSH_KEY_FILE -o StrictHostKeyChecking=no -T $REMOTE_USER@$TARGET_SERVER <<'EOSSH'
            
            # Change Permissions
            sudo chown -R root:root /data/benchmark/*
            sudo chmod -R 2700 /data/benchmark/*
            sudo chmod -R 700 /data/benchmark/*

            ## DEBUG ##
            # List the content 
            VAR1=`ls -al /data/benchmark`
            echo "$VAR1"
            ## END ##

            EOSSH
        env:
          SSH_KEYFILE: "./.ssh/terraform_rsa.pem"
          

      - task: SSH@0
        displayName: 'Start the iperf on vm-02 as a daemon'
        inputs:
          sshEndpoint: 'vm02SrvConn'
          runOptions: 'inline'
          inline: |
            # kill if there is any iperf server running
            pgrep -x iperf3 >/dev/null && sudo pgrep -x iperf3 | xargs sudo kill || echo "Process not found" 

            nohup sudo iperf3 -s -p 8010 </dev/null >/dev/null 2>&1 &
          readyTimeout: '20000'

      # - task: SSH@0
      #   displayName: 'Gather Performance Benchmarking stats'
      #   inputs:
      #     sshEndpoint: 'vm01SrvConn'
      #     runOptions: 'inline'
      #     inline: |
      #       cd /data/benchmark
      #       sudo ./perf_bench.sh /data/benchmark
      #     readyTimeout: '20000'

      - task: SSH@0
        displayName: 'Stop the iperf on vm-02'
        inputs:
          sshEndpoint: 'vm02SrvConn'
          runOptions: 'inline'
          inline: |
            # kill if there is any iperf server running
            pgrep -x iperf3 >/dev/null && sudo pgrep -x iperf3 | xargs sudo kill || echo "Process not found"  
          readyTimeout: '40000'

      # Reutilise the JSON file 
      # meaning regenarate the JUNIT file with XML
      # Meaning copy to pool agent from target machines 
      
      # (2) Install pip modules on pool agent
      - task: Bash@3
        displayName: 'Install python module junit_xml==1.9'
        inputs:
          targetType: 'inline'
          script: |
            # pip install on the pool agent
            pip3 install junit_xml==1.9 six==1.15.0
   
      # (3) Run python PerfBenchJunitXML.py on pool agent
      - task: Bash@3
        displayName: 'Run python PerfBenchJunitXML.py on pool agent'
        inputs:
          targetType: 'inline'
          script: |
            # give the list of target machines
            chmod u+x ./benchmark/Perf_git Bench_Junit_XML.py 
            python3 ./benchmark/Perf_Bench_Junit_XML.py vm-01 vm-02 

      # (4) Publish test results to Azure Pipelines
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/TEST-*.xml' 
          searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
          mergeTestResults: false # Optional
          failTaskOnFailedTests: false # Optional
          testRunTitle: Performance Benchmarking # Optional
          buildPlatform: x64 # Optional
          buildConfiguration: Release # Optional
          publishRunAttachments: true # Optional
      
      # (5) Get Test Result list 
      - task: Bash@3
        displayName: 'Get top run id of test runs.'
        inputs:
          targetType: 'inline'
          script: |
            #!/bin/bash
            
            # Get a list of test runs and filter the top one
            RunId=`curl --silent --location --request GET 'https://dev.azure.com/sandpit-devops/PerformanceBenchmarking/_apis/test/runs?api-version=6.0' \
            --header 'Authorization: Basic aGVsbG86NzR5bWZqcmZjcWd0ZTNpb2ZjdDVraWlva2R1d2Q2ZXR6aXlmYzJodzdxMzVzcmNkeDJjcQ==' \
            --header 'Cookie: VstsSession=%7B%22PersistentSessionId%22%3A%22ae7a874d-e7d9f-42f6-bf26-e71893f208ae%22%2C%22\
            PendingAuthenticationSessionId%22%3A%2200000000-0000-0000-0000-000000000000\
            %22%2C%22CurrentAuthenticationSessionId%22%3A%2200000000-0000-0000-0000-000000000000\
            %22%2C%22SignInState%22%3A%7B%7D%7D' ` 
            
            # DEBUG
            echo "Run ID:: $RunId"

            TestRunId=$(echo "$RunId" | jq ".value[-1] | .id ")

            # DEBUG
            echo "Test Run ID:: $TestRunId"

            # Write the AnalyticsHostname and AnalyticsAddress variables to the pipeline.
            
            echo "##vso[task.setvariable variable=TestRunId;isOutput=true]$TestRunId"
        name: 'RunCurl'
  
      # (6) Get Patch/Update Test Plan results
      - task: Bash@3
        displayName: 'Get test plans which will be patched.'
        inputs:
          targetType: 'inline'
          script: |
            #!/bin/bash

            function prepareData() {
              # iterate over ids
              local __TestCaseId=$(echo "$1") 
              local __resultvar=''

              for i in $(echo $__TestCaseId)
              do

                local __id=$(echo $i | cut -f1 -d, )
                local __servername=$(echo $i | cut -f2 -d, )
                local __filename="./PerformanceTest/Perf_Bench_$(__servername).json"
                local __markdown=$(echo $i | cut -f3 -d, ) 

                # __resultvar=$(echo " $__id / $__filename / $__markdown" )
                
                echo " {$__id} / {$__filename} / {$__markdown} " 
                
                ls -al $__filename

              #   case $__markdown in
              #   *info)
              #     echo "id >> $__id "
              #     echo "server >> $__servername "
              #     echo "# INFO Benchmark"
              #     echo "```"
              #     cat $__filename | jq " . | {\"Basic\ System\ Information\"} "
              #     echo "```"
              #   ;;

              #   *cpu)
              #     # alternatively, search with
              #     # jq '[.[keys[] | select(startswith(\"sysbench.cpu\"))]]'
              #     echo "id >> $__id "
              #     echo "server >> $__servername "
              #     echo "# CPU Benchmark"
              #     echo "```"
              #     cat $__filename | jq " . | {\"sysbench.cpu\"} "
              #     echo "```"
              #   ;;

              #   *mem)
              #     # alternatively, search w/
              #     # jq '[.[keys[] | select(startswith("sysbench.mem"))]]'
              #     echo "id >> $__id "
              #     echo "server >> $__servername "
              #     echo "# MEMORY Benchmark"
              #     echo "```"
              #     cat $__filename | jq " . | {\"sysbench.memory\"} "
              #     echo "```"
                  
              #   ;;

              #   *io)
              #     echo "id >> $__id "
              #     echo "server >> $__servername "
              #     echo ">> fio"
              #     echo "# INFO Benchmark"
              #     echo "```"
              #     echo "more..."
              #     echo "```"
              #   ;;

              #   *iperf)
              #     echo "id >> $__id "
              #     echo "server >> $__servername "
              #     echo ">> iperf"
              #     echo "# MEMOR\Y Benchmark"
              #     echo "```"
              #     cat $__filename | jq " . | {\"iperf_test\"} "
              #     echo "```"
              #   ;;
                
              #   esac

              # done
              
              echo "$__resultvar"

            }
            
            echo $(RunCurl.TestRunId)

            PatchList=`curl --silent --location --request GET 'https://dev.azure.com/sandpit-devops/PerformanceBenchmarking/_apis/test/Runs/$(RunCurl.TestRunId)/results?api-version=6.0' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --header 'Authorization: Basic UG9zdG1hblBBVDo3NHltZmpyZmNxZ3RlM2lvZmN0NWtpaW9rZHV3ZDZldHppeWZjMmh3N3EzNXNyY2R4MmNx' \
            --header 'Cookie: VstsSession=%7B%22PersistentSessionId%22%3A%22ae7a874d-e7df-42f6-bf26-e71893f208ae%22%2C%22\
            PendingAuthenticationSessionId%22%3A%2200000000-0000-0000-0000-000000000000%22%2C%22\
            CurrentAuthenticationSessionId%22%3A%2200000000-0000-0000-0000-000000000000%22%2C%22\
            SignInState%22%3A%7B%7D%7D' `

            # DEBUG
            echo "Here is the Patch List: $PatchList"

            TestCaseId=$(echo "$PatchList" | \
            jq ".value[] | { id, computerName, testCaseTitle } | [.id,.computerName,.testCaseTitle] | @csv" | \
            sed 's/\\"//g' | sed 's/"//g' )

            dataRaw=$(prepareData "$TestCaseId")

            echo "$dataRaw"

        name: 'RunPatchList'

      # (6.a) Get the test plan list ids for each server 
      # (6.b) Patch the test plan results with the JSON snippet
      # Comment in a test case result with maxSize= 1000 chars. 
      - task: Bash@3
        displayName: 'Update/Patch the comments of test plan results.'
        inputs:
          targetType: 'inline'
          script: |
            #!/bin/bash
            
            echo "---"

          

            # curl --silent --location --request PATCH 'https://dev.azure.com//sandpit-devops/PerformanceBenchmarking/_apis/test/Runs/22/results?api-version=6.0' \
            # --header 'Content-Type: application/json' \
            # --header 'Authorization: Basic UG9zdG1hblBBVDo3NHltZmpyZmNxZ3RlM2lvZmN0NWtpaW9rZHV3ZDZldHppeWZjMmh3N3EzNXNyY2R4MmNx' \
            # --header 'Cookie: VstsSession=%7B%22PersistentSessionId%22%3A%22ae7a874d-e7df-42f6-bf26-e71893f208ae%22%2C%22PendingAuthenticationSessionId%22%3A%2200000000-0000-0000-0000-000000000000%22%2C%22CurrentAuthenticationSessionId%22%3A%2200000000-0000-0000-0000-000000000000%22%2C%22SignInState%22%3A%7B%7D%7D' \
            # --data-raw '[
            #     {
            #         "id": 100000,
            #         "comment": "#  Memory Results \n```\n\"sysbench.cpu\":{\n \"threads\":\"1\",\n\"time\":\"60.0004\", \n \"events\":\"17869\",  \n \"min\":\"2.82\",  \n \"avg\":\"3.36\",  \n \"max\":\"14.46\",  \n \"percentile\":\"3.89\"\n  },\n ```"
            #     },
            #     {
            #         "id": 100001,
            #         "comment": "Website links are failing because of incorrect container id"
            #     }
            # ]'
      # (7) Optional - attach the json files
