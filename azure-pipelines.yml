trigger:
  - '*'
  
variables:
  buildConfiguration: 'Release'

stages:

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  jobs:
  - job: Provision
    displayName: 'Provision Azure App Service'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Release
    steps:
    - script: |
        # Exit when any command returns a failure status.
        set -e

        # Write terraform.tfvars.
        echo 'location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        echo 'vm_count = "'$(VmCount)'"' | tee -a terraform.tfvars
        echo 'vm_image_string = "'$(VmImageString)'"' | tee -a terraform.tfvars
        echo 'vm_size = "'$(VmSize)'"' | tee -a terraform.tfvars
        echo 'rg_tag = "'$(RgTag)'"' | tee -a terraform.tfvars
        echo 'admin_username = "'$(AdminUsername)'"' | tee -a terraform.tfvars
        echo 'admin_password = "'$(AdminPassword)'"' | tee -a terraform.tfvars
        
        # Write backend.tfvars.
        echo 'resource_group_name = "'$(ResourceGroupName)'"'  | tee -a terraform.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a terraform.tfvars
        echo 'container_name = "tfstate"' | tee -a terraform.tfvars
        echo 'key = "terraform.tfstate"' | tee -a terraform.tfvars

        # Initialize Terraform.
        terraform init --input=false --backend-config="terraform.tfvars"
        
        # Apply the Terraform plan.
        terraform apply --input=false --auto-approve
        
        # Get the Analytics name for the dev environment.
        AnalyticsHostname=$(terraform output hostname) 
        AnalyticsAddress=$(terraform output public_ip_address) 
        
        # Write the AnalyticsHostname and AnalyticsAddress variables to the pipeline.
        echo "##vso[task.setvariable variable=AnalyticsHostname;isOutput=true]$AnalyticsHostname"
        echo "##vso[task.setvariable variable=AnalyticsAddress;isOutput=true]$AnalyticsAddress"
        
        # Apply the Terraform destroy.
        # terraform destroy -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        #ARM_ENDPOINT: $(ARM_ENDPOINT)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
  - deployment: deploy
    dependsOn: Provision
    variables:
      # map the output variable from A into this job
      AnalyticsHostname: $[ dependencies.Provision.outputs['RunTerraform.AnalyticsHostname'] ]
      AnalyticsAddress: $[ dependencies.Provision.outputs['RunTerraform.AnalyticsAddress'] ]
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo $(AnalyticsAddress) # this step uses the mapped-in variable
            name: echovar
          - script: |
              echo "##vso[task.setvariable variable=AnalyticsAddress;]$(AnalyticsAddress)"
            displayName: 'Run a one-line script'
          - script: |
              echo $(AnalyticsAddress) 
            displayName: '=== DEBUG LINE ==='   
       
